--- a/browser/components/newtab/lib/ActivityStream.jsm	2019-07-06 01:48:30.000000000 +0000
+++ b/browser/components/newtab/lib/ActivityStream.jsm	2019-07-10 04:36:10.596331459 +0000
@@ -18,19 +18,15 @@
 const {NewTabInit} = ChromeUtils.import("resource://activity-stream/lib/NewTabInit.jsm");
 const {SectionsFeed} = ChromeUtils.import("resource://activity-stream/lib/SectionsManager.jsm");
 const {PlacesFeed} = ChromeUtils.import("resource://activity-stream/lib/PlacesFeed.jsm");
 const {PrefsFeed} = ChromeUtils.import("resource://activity-stream/lib/PrefsFeed.jsm");
 const {Store} = ChromeUtils.import("resource://activity-stream/lib/Store.jsm");
 const {SystemTickFeed} = ChromeUtils.import("resource://activity-stream/lib/SystemTickFeed.jsm");
-const {TelemetryFeed} = ChromeUtils.import("resource://activity-stream/lib/TelemetryFeed.jsm");
 const {FaviconFeed} = ChromeUtils.import("resource://activity-stream/lib/FaviconFeed.jsm");
 const {TopSitesFeed} = ChromeUtils.import("resource://activity-stream/lib/TopSitesFeed.jsm");
-const {TopStoriesFeed} = ChromeUtils.import("resource://activity-stream/lib/TopStoriesFeed.jsm");
-const {HighlightsFeed} = ChromeUtils.import("resource://activity-stream/lib/HighlightsFeed.jsm");
 const {ASRouterFeed} = ChromeUtils.import("resource://activity-stream/lib/ASRouterFeed.jsm");
-const {DiscoveryStreamFeed} = ChromeUtils.import("resource://activity-stream/lib/DiscoveryStreamFeed.jsm");
 
 const DEFAULT_SITES = new Map([
   // This first item is the global list fallback for any unexpected geos
   ["", "https://www.youtube.com/,https://www.facebook.com/,https://www.wikipedia.org/,https://www.reddit.com/,https://www.amazon.com/,https://twitter.com/"],
   ["US", "https://www.youtube.com/,https://www.facebook.com/,https://www.amazon.com/,https://www.reddit.com/,https://www.wikipedia.org/,https://twitter.com/"],
   ["CA", "https://www.youtube.com/,https://www.facebook.com/,https://www.reddit.com/,https://www.wikipedia.org/,https://www.amazon.ca/,https://twitter.com/"],
@@ -43,13 +39,13 @@
 const GEO_PREF = "browser.search.region";
 const SPOCS_GEOS = ["US"];
 const IS_NIGHTLY_OR_UNBRANDED_BUILD = ["nightly", "default"].includes(UpdateUtils.getUpdateChannel(true));
 
 // Determine if spocs should be shown for a geo/locale
 function showSpocs({geo}) {
-  return SPOCS_GEOS.includes(geo);
+  return false;
 }
 
 // Configure default Activity Stream prefs with a plain `value` or a `getValue`
 // that computes a value. A `value_local_dev` is used for development defaults.
 const PREFS_CONFIG = new Map([
   ["default.sites", {
@@ -74,13 +70,13 @@
       personalized: true,
       version: 1,
     }),
   }],
   ["showSponsored", {
     title: "Show sponsored cards in spoc experiment (show_spocs in topstories.options has to be set to true as well)",
-    value: true,
+    value: false,
   }],
   ["pocketCta", {
     title: "Pocket cta and button for logged out users.",
     value: JSON.stringify({
       cta_button: "",
       cta_text: "",
@@ -99,26 +95,26 @@
   ["showSearch", {
     title: "Show the Search bar",
     value: true,
   }],
   ["feeds.snippets", {
     title: "Show snippets on activity stream",
-    value: true,
+    value: false,
   }],
   ["topSitesRows", {
     title: "Number of rows of Top Sites to display",
-    value: 1,
+    value: 2,
   }],
   ["telemetry", {
     title: "Enable system error and usage data collection",
-    value: true,
+    value: false,
     value_local_dev: false,
   }],
   ["telemetry.ut.events", {
     title: "Enable Unified Telemetry event data collection",
-    value: AppConstants.EARLY_BETA_OR_EARLIER,
+    value: false,
     value_local_dev: false,
   }],
   ["telemetry.structuredIngestion", {
     title: "Enable Structured Ingestion Telemetry data collection",
     value: true,
     value_local_dev: false,
@@ -138,13 +134,13 @@
   ["section.highlights.includeBookmarks", {
     title: "Boolean flag that decides whether or not to show bookmarks in highlights.",
     value: true,
   }],
   ["section.highlights.includePocket", {
     title: "Boolean flag that decides whether or not to show saved Pocket stories in highlights.",
-    value: true,
+    value: false,
   }],
   ["section.highlights.includeDownloads", {
     title: "Boolean flag that decides whether or not to show saved recent Downloads in highlights.",
     value: true,
   }],
   ["section.highlights.rows", {
@@ -154,13 +150,13 @@
   ["section.topstories.rows", {
     title: "Number of rows of Top Stories to display",
     value: 1,
   }],
   ["sectionOrder", {
     title: "The rendering order for the sections",
-    value: "topsites,topstories,highlights",
+    value: "topsites",
   }],
   ["improvesearch.noDefaultSearchTile", {
     title: "Remove tiles that are the same as the default search",
     value: true,
   }],
   ["improvesearch.topSiteSearchShortcuts.searchEngines", {
@@ -230,24 +226,24 @@
         "CA": ["en-CA", "en-GB", "en-US", "en-ZA"],
       })[geo];
       const isEnabled = IS_NIGHTLY_OR_UNBRANDED_BUILD && locales && locales.includes(locale);
       return JSON.stringify({
         api_key_pref: "extensions.pocket.oAuthConsumerKey",
         collapsible: true,
-        enabled: isEnabled,
-        show_spocs: showSpocs({geo}),
+        enabled: false,
+        show_spocs: false,
         hardcoded_layout: true,
         personalized: false,
         // This is currently an exmple layout used for dev purposes.
         layout_endpoint: "https://getpocket.cdn.mozilla.net/v3/newtab/layout?version=1&consumer_key=$apiKey&layout_variant=basic",
       });
     },
   }],
   ["discoverystream.endpoints", {
     title: "Endpoint prefixes (comma-separated) that are allowed to be requested",
-    value: "https://getpocket.cdn.mozilla.net/",
+    value: "",
   }],
   ["discoverystream.spoc.impressions", {
     title: "Track spoc impressions",
     skipBroadcast: true,
     value: "{}",
   }],
@@ -291,39 +287,39 @@
     value: true,
   },
   {
     name: "section.highlights",
     factory: () => new HighlightsFeed(),
     title: "Fetches content recommendations from places db",
-    value: true,
+    value: false,
   },
   {
     name: "section.topstories",
     factory: () => new TopStoriesFeed(PREFS_CONFIG.get("discoverystream.config")),
     title: "Fetches content recommendations from a configurable content provider",
     // Dynamically determine if Pocket should be shown for a geo / locale
     getValue: ({geo, locale}) => {
       const locales = ({
         "US": ["en-CA", "en-GB", "en-US", "en-ZA"],
         "CA": ["en-CA", "en-GB", "en-US", "en-ZA"],
         "DE": ["de", "de-DE", "de-AT", "de-CH"],
       })[geo];
-      return !!locales && locales.includes(locale);
+      return false;
     },
   },
   {
     name: "systemtick",
     factory: () => new SystemTickFeed(),
     title: "Produces system tick events to periodically check for data expiry",
     value: true,
   },
   {
     name: "telemetry",
     factory: () => new TelemetryFeed(),
     title: "Relays telemetry-related actions to PingCentre",
-    value: true,
+    value: false,
   },
   {
     name: "favicon",
     factory: () => new FaviconFeed(),
     title: "Fetches tippy top manifests from remote service",
     value: true,
@@ -341,13 +337,13 @@
     value: true,
   },
   {
     name: "discoverystreamfeed",
     factory: () => new DiscoveryStreamFeed(),
     title: "Handles new pocket ui for the new tab page",
-    value: true,
+    value: false,
   },
 ];
 
 const FEEDS_CONFIG = new Map();
 for (const config of FEEDS_DATA) {
   const pref = `feeds.${config.name}`;
